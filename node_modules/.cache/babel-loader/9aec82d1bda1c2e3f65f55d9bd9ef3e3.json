{"ast":null,"code":"import * as actionTypes from \"./actionTypes.js\"; // initialise firebase app\n\nimport { firebaseAppAuth } from '../../shared/firebase';\n\nvar requestLogin = function requestLogin() {\n  return {\n    type: actionTypes.LOGIN_REQUEST\n  };\n};\n\nvar receiveLogin = function receiveLogin(user) {\n  return {\n    type: actionTypes.LOGIN_SUCCESS,\n    user: user\n  };\n};\n\nvar loginError = function loginError() {\n  return {\n    type: actionTypes.LOGIN_FAILURE\n  };\n};\n\nvar requestLogout = function requestLogout() {\n  return {\n    type: actionTypes.LOGOUT_REQUEST\n  };\n};\n\nvar receiveLogout = function receiveLogout() {\n  return {\n    type: actionTypes.LOGOUT_SUCCESS\n  };\n};\n\nvar logoutError = function logoutError() {\n  return {\n    type: actionTypes.LOGOUT_FAILURE\n  };\n};\n\nvar verifyRequest = function verifyRequest() {\n  return {\n    type: actionTypes.VERIFY_REQUEST\n  };\n};\n\nvar verifySuccess = function verifySuccess() {\n  return {\n    type: actionTypes.VERIFY_SUCCESS\n  };\n}; // actual login user logic\n\n\nexport var loginUser = function loginUser(email, password, callback) {\n  return function (dispatch) {\n    // return the login request message\n    dispatch(requestLogin()); // auth with firebase using signInWithEmailAndPassword\n    // if success then take user as successfully log in\n    // if fail then send login error\n\n    firebaseAppAuth.signInWithEmailAndPassword(email, password).then(function (response) {\n      var user = response.user;\n      dispatch(receiveLogin(user));\n      callback();\n    }).catch(function (error) {\n      //Do something with the error if you want!\n      dispatch(loginError());\n    });\n  };\n};\nexport var logoutUser = function logoutUser(callback) {\n  return function (dispatch) {\n    dispatch(requestLogout());\n    firebaseAppAuth.signOut().then(function () {\n      dispatch(receiveLogout());\n      callback();\n    }).catch(function (error) {\n      //Do something with the error if you want!\n      dispatch(logoutError());\n    });\n  };\n}; // This method look for pre-existing user session and re-establish it\n// this happen on refresh\n\nexport var verifyAuth = function verifyAuth(callbackOnNotLoggedin) {\n  return function (dispatch) {\n    dispatch(verifyRequest());\n    firebaseAppAuth.onAuthStateChanged(function (user) {\n      if (user !== null) {\n        dispatch(receiveLogin(user));\n      } else {\n        callbackOnNotLoggedin();\n      }\n\n      dispatch(verifySuccess());\n    });\n  };\n};","map":{"version":3,"sources":["C:/Projects/hlh-cms/src/store/actions/auth.js"],"names":["actionTypes","firebaseAppAuth","requestLogin","type","LOGIN_REQUEST","receiveLogin","user","LOGIN_SUCCESS","loginError","LOGIN_FAILURE","requestLogout","LOGOUT_REQUEST","receiveLogout","LOGOUT_SUCCESS","logoutError","LOGOUT_FAILURE","verifyRequest","VERIFY_REQUEST","verifySuccess","VERIFY_SUCCESS","loginUser","email","password","callback","dispatch","signInWithEmailAndPassword","then","response","catch","error","logoutUser","signOut","verifyAuth","callbackOnNotLoggedin","onAuthStateChanged"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes.js\";\r\n\r\n// initialise firebase app\r\nimport { firebaseAppAuth } from '../../shared/firebase'\r\nconst requestLogin    = () => {\r\n  return {\r\n    type: actionTypes.LOGIN_REQUEST,\r\n  };\r\n};\r\n\r\nconst receiveLogin = user => {\r\n  return {\r\n    type: actionTypes.LOGIN_SUCCESS,\r\n    user,\r\n  };\r\n};\r\n\r\nconst loginError = () => {\r\n  return {\r\n    type: actionTypes.LOGIN_FAILURE,\r\n  };\r\n};\r\n\r\nconst requestLogout = () => {\r\n  return {\r\n    type: actionTypes.LOGOUT_REQUEST,\r\n  };\r\n};\r\n\r\nconst receiveLogout = () => {\r\n  return {\r\n    type: actionTypes.LOGOUT_SUCCESS,\r\n  };\r\n};\r\n\r\nconst logoutError = () => {\r\n  return {\r\n    type: actionTypes.LOGOUT_FAILURE,\r\n  };\r\n};\r\n\r\nconst verifyRequest = () => {\r\n  return {\r\n    type: actionTypes.VERIFY_REQUEST,\r\n  };\r\n};\r\n\r\nconst verifySuccess = () => {\r\n  return {\r\n    type: actionTypes.VERIFY_SUCCESS,\r\n  };\r\n};\r\n\r\n// actual login user logic\r\nexport const loginUser = (email, password, callback) => dispatch => {\r\n  // return the login request message\r\n  dispatch(requestLogin());\r\n  // auth with firebase using signInWithEmailAndPassword\r\n  // if success then take user as successfully log in\r\n  // if fail then send login error\r\n  firebaseAppAuth\r\n    .signInWithEmailAndPassword(email, password)\r\n    .then(response => {\r\n      const { user } = response;\r\n      dispatch(receiveLogin(user));\r\n      callback();\r\n    })\r\n    .catch(error => {\r\n      //Do something with the error if you want!\r\n      dispatch(loginError());\r\n    });\r\n};\r\n\r\nexport const logoutUser = (callback) => dispatch => {\r\n  dispatch(requestLogout());\r\n  firebaseAppAuth\r\n    .signOut()\r\n    .then(() => {\r\n      dispatch(receiveLogout());\r\n      callback();\r\n    })\r\n    .catch(error => {\r\n      //Do something with the error if you want!\r\n      dispatch(logoutError());\r\n    });\r\n};\r\n\r\n// This method look for pre-existing user session and re-establish it\r\n// this happen on refresh\r\nexport const verifyAuth = (callbackOnNotLoggedin) => dispatch => {\r\n  dispatch(verifyRequest());\r\n  firebaseAppAuth\r\n    .onAuthStateChanged(user => {\r\n      if (user !== null) {\r\n        dispatch(receiveLogin(user));\r\n      } else {\r\n        callbackOnNotLoggedin();\r\n      }\r\n      dispatch(verifySuccess());\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}