{
	"version":        3,
	"sources":        [
		"views/HLH/Members.js",
		"views/UI/Backdrop.module.css",
		"views/UI/Modal.module.css",
		"views/UI/Auxi.js",
		"views/UI/Backdrop.js",
		"views/UI/Modal.js"
	],
	"names":          [
		"BASE_FORM_CONTROLS",
		"id",
		"value",
		"socialName",
		"fullName",
		"dateRegistered",
		"TODAY",
		"email",
		"phone",
		"facebook",
		"instagram",
		"twitter",
		"Members",
		"state",
		"editing",
		"isEnrollingStudent",
		"formControls",
		"availableClasses",
		"selectedClassId",
		"undefined",
		"spreadOnForm",
		"formData",
		"Object",
		"keys",
		"forEach",
		"field",
		"setState",
		"editingStartHandler",
		"members",
		"props",
		"focusedMember",
		"isEmpty",
		"i",
		"resetFormHandler",
		"isEditing",
		"clearModalHandler",
		"formElementChangeHandler",
		"e",
		"name",
		"target",
		"handleSelectedClassChange",
		"submitMemberHandler",
		"preventDefault",
		"member",
		"onAddMember",
		"onEditMember",
		"alert",
		"startEnrollHandler",
		"student",
		"focusedStudent",
		"fetchAvailableClasses",
		"axios",
		"get",
		"then",
		"res",
		"fetchedClasses",
		"key",
		"data",
		"push",
		"catch",
		"err",
		"console",
		"log",
		"submitEnrollHandler",
		"classId",
		"studentId",
		"put",
		"isEnrolled",
		"hasPaid",
		"this",
		"onFetchMembers",
		"form_member",
		"show",
		"modalClosed",
		"action",
		"method",
		"encType",
		"className",
		"onSubmit",
		"onReset",
		"row",
		"md",
		"xs",
		"htmlFor",
		"type",
		"required",
		"onChange",
		"placeholder",
		"autoComplete",
		"size",
		"color",
		"onClick",
		"btn_add_member",
		"col",
		"sm",
		"xl",
		"rows_members",
		"map",
		"mKey",
		"Array",
		"socialProfiles",
		"medium",
		"socialClickedHandler",
		"block",
		"isAdmin",
		"options_classes",
		"cKey",
		"c",
		"dateFrom",
		"dateTo",
		"tbl_members",
		"isLoading",
		"responsive",
		"striped",
		"tag",
		"previous",
		"active",
		"next",
		"form_enrollStudent",
		"readOnly",
		"Component",
		"connect",
		"auth",
		"user",
		"displayName",
		"dispatch",
		"token",
		"userId",
		"actions",
		"memberInfo",
		"module",
		"exports",
		"auxi",
		"children",
		"backdrop",
		"classes",
		"Backdrop",
		"clicked",
		"Modal",
		"nextProps",
		"nextState",
		"Auxi",
		"style",
		"transform",
		"opacity"
	],
	"mappings":       "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",
	"file":           "static/js/43.0f859b67.chunk.js",
	"sourcesContent": [
		"import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\n// eslint-disable-next-line\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Pagination,\r\n  PaginationItem,\r\n  PaginationLink,\r\n  Row,\r\n  Table,\r\n} from \"reactstrap\";\r\nimport Spinner from \"reactstrap/es/Spinner.js\";\r\nimport axios from \"../../shared/axios-hlh.js\";\r\nimport {\r\n  isEmpty,\r\n  socialClickedHandler,\r\n  TODAY\r\n} from \"../../shared/utility\";\r\nimport * as actions from \"../../store/actions\";\r\nimport Modal from \"../UI/Modal\";\r\n\r\nconst BASE_FORM_CONTROLS = {\r\n  id: {\r\n    value: \"\",\r\n  },\r\n  socialName: {\r\n    value: \"\",\r\n  },\r\n  fullName: {\r\n    value: \"\",\r\n  },\r\n  dateRegistered: {\r\n    value: TODAY,\r\n  },\r\n  email: {\r\n    value: \"\",\r\n  },\r\n  phone: {\r\n    value: \"\",\r\n  },\r\n  facebook: {\r\n    value: \"\",\r\n  },\r\n  instagram: {\r\n    value: \"\",\r\n  },\r\n  twitter: {\r\n    value: \"\",\r\n  },\r\n};\r\n\r\nclass Members extends Component {\r\n  state = {\r\n    editing: false,\r\n    isEnrollingStudent: false,\r\n    formControls: BASE_FORM_CONTROLS,\r\n    availableClasses: [],\r\n    selectedClassId: undefined,\r\n  };\r\n  \r\n  componentDidMount() {\r\n    this.props.onFetchMembers(\"\", \"\");\r\n  }\r\n  \r\n  spreadOnForm = formData => {\r\n    let formControls = BASE_FORM_CONTROLS;\r\n    Object.keys(formData).forEach(field => {\r\n      formControls = {\r\n        ...formControls,\r\n        [field]: {\r\n          ...formControls[field],\r\n          value: formData[field],\r\n        },\r\n      };\r\n    });\r\n    this.setState({formControls});\r\n  };\r\n  \r\n  editingStartHandler = (id) => {\r\n    const members = this.props.members;\r\n    let focusedMember = BASE_FORM_CONTROLS;\r\n    if (id && !isEmpty(id)) {\r\n      for (let i in members) {\r\n        if (members[i].id === id) focusedMember = members[i];\r\n      }\r\n      this.spreadOnForm(focusedMember);\r\n    }\r\n    else this.resetFormHandler();\r\n    \r\n    this.setState({isEditing: true});\r\n  };\r\n  clearModalHandler = () => this.setState({\r\n    isEditing: false,\r\n    isEnrollingStudent: false,\r\n    formControls: BASE_FORM_CONTROLS,\r\n  });\r\n  resetFormHandler = () => this.setState({\r\n    formControls: BASE_FORM_CONTROLS,\r\n  });\r\n  \r\n  formElementChangeHandler = e => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    this.setState({\r\n      formControls: {\r\n        ...this.state.formControls,\r\n        [name]: {\r\n          ...this.state.formControls[name],\r\n          value,\r\n        },\r\n      },\r\n    });\r\n  };\r\n  \r\n  handleSelectedClassChange = e => {\r\n    this.setState({selectedClassId: e.target.value});\r\n  };\r\n  \r\n  submitMemberHandler = e => {\r\n    e.preventDefault();\r\n    const member = {};\r\n    for (let field in this.state.formControls) {\r\n      member[field] = this.state.formControls[field].value;\r\n    }\r\n    \r\n    // Decision: Create new or Edit existing member\r\n    if (!isEmpty(member.id)) {\r\n      this.props.onEditMember(\"\", member);\r\n    }\r\n    else {\r\n      delete member.id;\r\n      this.props.onAddMember(\"\", member);\r\n    }\r\n    \r\n    this.clearModalHandler();\r\n    this.resetFormHandler();\r\n    alert(\"Member info submitted\");\r\n  };\r\n  \r\n  startEnrollHandler = id => {\r\n    const student = this.props.members;\r\n    let focusedStudent = BASE_FORM_CONTROLS;\r\n    if (id && !isEmpty(id)) {\r\n      for (let i in student) {\r\n        if (student[i].id === id) focusedStudent = student[i];\r\n      }\r\n      this.spreadOnForm(focusedStudent);\r\n    }\r\n    else this.resetFormHandler();\r\n    \r\n    this.setState({isEnrollingStudent: true});\r\n    this.fetchAvailableClasses();\r\n  };\r\n  \r\n  fetchAvailableClasses = () => {\r\n    axios.get(\"/classes.json\")\r\n      .then(res => {\r\n        const fetchedClasses = [];\r\n        for (let key in res.data) {\r\n          fetchedClasses.push({\r\n            ...res.data[key],\r\n            id: key,\r\n          });\r\n        }\r\n        this.setState({\r\n          availableClasses: fetchedClasses,\r\n          selectedClassId: fetchedClasses[0].id,\r\n        });\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n  \r\n  submitEnrollHandler = e => {\r\n    e.preventDefault();\r\n    const classId = this.state.selectedClassId;\r\n    const studentId = this.state.formControls.id.value;\r\n    console.log(studentId, classId);\r\n    \r\n    this.clearModalHandler();\r\n    this.resetFormHandler();\r\n    \r\n    axios.put(\"/classEnrollments/\" + classId + \"/\" + studentId + \".json\",\r\n      {isEnrolled: true, hasPaid: false})\r\n      .then(res => {\r\n        console.log(res);\r\n        alert(\"Enrollment info submitted\");\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        alert(err);\r\n      });\r\n  };\r\n  \r\n  render() {\r\n    const form_member = (\r\n      <Modal show={this.state.editing} modalClosed={this.clearModalHandler}>\r\n        <Row>\r\n          <Col>\r\n            <Card>\r\n              <CardHeader>\r\n                <strong>Member Info</strong>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <Form action=\"\" method=\"post\" encType=\"multipart/form-data\"\r\n                      className=\"form-horizontal\"\r\n                      onSubmit={this.submitMemberHandler}\r\n                      onReset={this.resetFormHandler}>\r\n                  <FormGroup row>\r\n                    <Col md=\"3\">\r\n                      <Label>Member ID</Label>\r\n                    </Col>\r\n                    <Col xs=\"12\" md=\"9\">\r\n                      <p className=\"form-control-static\">\r\n                        {isEmpty(this.state.formControls.id.value)\r\n                         ? \"ID UNAVAILABLE. NEW MEMBER.\"\r\n                         : this.state.formControls.id.value}</p>\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Col md=\"3\">\r\n                      <Label htmlFor=\"fullName-input\">Full name</Label>\r\n                    </Col>\r\n                    <Col xs=\"12\" md=\"9\">\r\n                      <Input type=\"text\" id=\"fullName-input\" name=\"fullName\"\r\n                             required\r\n                             value={this.state.formControls.fullName.value}\r\n                             onChange={this.formElementChangeHandler}\r\n                             placeholder=\"Enter full name\"/>\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Col md=\"3\">\r\n                      <Label htmlFor=\"socialName-input\">Social name</Label>\r\n                    </Col>\r\n                    <Col xs=\"12\" md=\"9\">\r\n                      <Input type=\"text\" id=\"socialName-input\"\r\n                             name=\"socialName\"\r\n                             required\r\n                             value={this.state.formControls.socialName.value}\r\n                             onChange={this.formElementChangeHandler}\r\n                             placeholder=\"Other members will call you\r\n                        by this Social Name\"/>\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Col md=\"3\">\r\n                      <Label htmlFor=\"date-input\">Date Registered</Label>\r\n                    </Col>\r\n                    <Col xs=\"12\" md=\"9\">\r\n                      <Input type=\"date\" id=\"date-input\" name=\"dateRegistered\"\r\n                             value={this.state.formControls.dateRegistered.value}\r\n                             onChange={this.formElementChangeHandler}/>\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Col md=\"3\">\r\n                      <Label htmlFor=\"email-input\">Email</Label>\r\n                    </Col>\r\n                    <Col xs=\"12\" md=\"9\">\r\n                      <Input type=\"email\" id=\"email-input\" name=\"email\" required\r\n                             value={this.state.formControls.email.value}\r\n                             onChange={this.formElementChangeHandler}\r\n                             placeholder=\"Enter email\"\r\n                             autoComplete=\"email\"/>\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Col md=\"3\">\r\n                      <Label htmlFor=\"phone-input\">Phone number</Label>\r\n                    </Col>\r\n                    <Col xs=\"12\" md=\"9\">\r\n                      <Input type=\"text\" id=\"phone-input\" name=\"phone\"\r\n                             required\r\n                             value={this.state.formControls.phone.value}\r\n                             onChange={this.formElementChangeHandler}\r\n                             placeholder=\"Enter phone number\"/>\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Col md=\"3\">\r\n                      <Label htmlFor=\"facebook-input\">Facebook</Label>\r\n                    </Col>\r\n                    <Col xs=\"12\" md=\"9\">\r\n                      <Input type=\"text\" id=\"facebook-input\" name=\"facebook\"\r\n                             value={this.state.formControls.facebook.value}\r\n                             onChange={this.formElementChangeHandler}\r\n                             placeholder=\"Enter Facebook username\"/>\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Col md=\"3\">\r\n                      <Label htmlFor=\"instagram-input\">Instagram</Label>\r\n                    </Col>\r\n                    <Col xs=\"12\" md=\"9\">\r\n                      <Input type=\"text\" id=\"instagram-input\" name=\"instagram\"\r\n                             value={this.state.formControls.instagram.value}\r\n                             onChange={this.formElementChangeHandler}\r\n                             placeholder=\"Enter Instagram username\"/>\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Col md=\"3\">\r\n                      <Label htmlFor=\"twitter-input\">Twitter</Label>\r\n                    </Col>\r\n                    <Col xs=\"12\" md=\"9\">\r\n                      <Input type=\"text\" id=\"twitter-input\" name=\"twitter\"\r\n                             value={this.state.formControls.twitter.value}\r\n                             onChange={this.formElementChangeHandler}\r\n                             placeholder=\"Enter Twitter username\"/>\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <Button size=\"sm\" color=\"danger\"\r\n                          onClick={this.clearModalHandler}>\r\n                    <i className=\"fa fa-ban\"/> Cancel</Button>\r\n                  <Button type=\"reset\" size=\"sm\" color=\"warning\">\r\n                    <i className=\"fa fa-ban\"/> Reset</Button>\r\n                  <Button type=\"submit\" size=\"sm\" color=\"primary\">\r\n                    <i className=\"fa fa-dot-circle-o\"/> Submit</Button>\r\n                </Form>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Modal>\r\n    );\r\n    const btn_add_member = <Row>\r\n      <Col col=\"8\" sm=\"6\" md=\"4\" xl className=\"mb-3 mb-xl-0\">\r\n        <Button color=\"info\" className=\"btn-square\"\r\n                onClick={() => this.editingStartHandler(\"\")}>\r\n          <i className=\"fa fa-plus\"/> Add a new member\r\n        </Button>\r\n      </Col>\r\n    </Row>;\r\n    \r\n    const rows_members = Object.keys(this.props.members).map(mKey => {\r\n      return (\r\n        [\r\n          ...Array(this.props.members[mKey]).map(member => {\r\n            const socialMedia = [\"facebook\", \"twitter\", \"instagram\"];\r\n            const socialProfiles = socialMedia.map(medium => {\r\n              if (!isEmpty(member[medium])) {\r\n                return <Button\r\n                  key={medium + mKey}\r\n                  className={\"btn-brand mr-1 mb-1 btn-sm btn-\" + medium}\r\n                  onClick={() =>\r\n                    socialClickedHandler(medium, member[medium])}>\r\n                  <i className={\"fa fa-\" + medium}/>\r\n                </Button>;\r\n              }\r\n              return null;\r\n            });\r\n            return (\r\n              <tr key={member.id}>\r\n                <td>{member.socialName}</td>\r\n                <td>{member.fullName}</td>\r\n                <td>{member.dateRegistered}</td>\r\n                <td>{member.email}</td>\r\n                <td>{member.phone}</td>\r\n                <td>{socialProfiles}</td>\r\n                <td><Button color=\"info\" className=\"btn-pill\" size=\"sm\" block>\r\n                  Info</Button>\r\n                </td>\r\n                {this.props.isAdmin &&\r\n                <td><Button color=\"success\" className=\"btn-pill\" size=\"sm\"\r\n                            onClick={() => this.startEnrollHandler(member.id)}>\r\n                  <i className=\"fa fa-plus\"/></Button></td>}\r\n                {this.props.isAdmin &&\r\n                <td><Button color=\"info\" className=\"btn-pill\" size=\"sm\"\r\n                            onClick={() => this.editingStartHandler(member.id)}>\r\n                  Edit</Button></td>}\r\n              </tr>\r\n            );\r\n          })\r\n        ]\r\n      );\r\n    });\r\n    \r\n    const options_classes = Object.keys(this.state.availableClasses).map(\r\n      cKey => {\r\n        return (\r\n          [\r\n            ...Array(this.state.availableClasses[cKey]).map(c => {\r\n              return (<option\r\n                key={c.id}\r\n                value={c.id}>\r\n                {c.className}: {c.dateFrom} to {c.dateTo}\r\n              </option>);\r\n            })\r\n          ]\r\n        );\r\n      });\r\n    \r\n    let tbl_members = this.props.isLoading\r\n                      ? <Spinner/>\r\n                      : <Row>\r\n                        <Col className=\"table-responsive-sm\">\r\n                          <Card>\r\n                            <CardHeader>\r\n                              List of Members\r\n                            </CardHeader>\r\n                            <CardBody>\r\n                              <Table responsive striped>\r\n                                <thead>\r\n                                <tr>\r\n                                  <th>Social Name</th>\r\n                                  <th>Full Name</th>\r\n                                  <th>Date Registered</th>\r\n                                  <th>Email</th>\r\n                                  <th>Phone No.</th>\r\n                                  <th>Social Media</th>\r\n                                  <th>Payment History</th>\r\n                                  {this.props.isAdmin && <th>Enroll</th>}\r\n                                  {this.props.isAdmin && <th>Edit</th>}\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {rows_members}\r\n                                </tbody>\r\n                              </Table>\r\n                              <Pagination>\r\n                                <PaginationItem>\r\n                                  <PaginationLink tag=\"button\" previous/>\r\n                                </PaginationItem>\r\n                                <PaginationItem active>\r\n                                  <PaginationLink\r\n                                    tag=\"button\">1</PaginationLink>\r\n                                </PaginationItem>\r\n                                <PaginationItem>\r\n                                  <PaginationLink\r\n                                    tag=\"button\">2</PaginationLink>\r\n                                </PaginationItem>\r\n                                <PaginationItem>\r\n                                  <PaginationLink\r\n                                    tag=\"button\">3</PaginationLink>\r\n                                </PaginationItem>\r\n                                <PaginationItem>\r\n                                  <PaginationLink\r\n                                    tag=\"button\">4</PaginationLink>\r\n                                </PaginationItem>\r\n                                <PaginationItem>\r\n                                  <PaginationLink tag=\"button\" next/>\r\n                                </PaginationItem>\r\n                              </Pagination>\r\n                            </CardBody>\r\n                          </Card>\r\n                        </Col>\r\n                      </Row>;\r\n    \r\n    const form_enrollStudent = (\r\n      <Modal show={this.state.isEnrollingStudent}\r\n             modalClosed={this.clearModalHandler}>\r\n        <Row>\r\n          <Col>\r\n            <Card>\r\n              <CardHeader>\r\n                <strong>Member Info</strong>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <Form action=\"\" method=\"post\" encType=\"multipart/form-data\"\r\n                      className=\"form-horizontal\"\r\n                      onSubmit={this.submitEnrollHandler}\r\n                      onReset={this.resetFormHandler}>\r\n                  <FormGroup row>\r\n                    <Col md=\"3\">\r\n                      <Label>Member ID</Label>\r\n                    </Col>\r\n                    <Col xs=\"12\" md=\"9\">\r\n                      <p className=\"form-control-static\">\r\n                        {isEmpty(this.state.formControls.id.value)\r\n                         ? \"ID UNAVAILABLE. NEW MEMBER.\"\r\n                         : this.state.formControls.id.value}</p>\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Col md=\"3\">\r\n                      <Label htmlFor=\"fullName-input\">Full name</Label>\r\n                    </Col>\r\n                    <Col xs=\"12\" md=\"9\">\r\n                      <Input type=\"text\" id=\"fullName-input\" name=\"fullName\"\r\n                             required readOnly\r\n                             value={this.state.formControls.fullName.value}\r\n                        // onChange={this.formElementChangeHandler}\r\n                             placeholder=\"Enter full name\"/>\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Col md=\"3\">\r\n                      <Label htmlFor=\"socialName-input\">Social name</Label>\r\n                    </Col>\r\n                    <Col xs=\"12\" md=\"9\">\r\n                      <Input type=\"text\" id=\"socialName-input\"\r\n                             name=\"socialName\"\r\n                             required readOnly\r\n                             value={this.state.formControls.socialName.value}\r\n                        // onChange={this.formElementChangeHandler}\r\n                             placeholder=\"Other members will call you\r\n                        by this Social Name\"/>\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Col md=\"3\">\r\n                      <Label htmlFor=\"class-select\">Select a class</Label>\r\n                    </Col>\r\n                    <Col md=\"9\">\r\n                      <Input type=\"select\"\r\n                             name=\"class-select\" id=\"class-select\"\r\n                             value={this.state.selectedClassId}\r\n                             onChange={this.handleSelectedClassChange}>\r\n                        {options_classes}\r\n                      </Input>\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <Button size=\"sm\" color=\"danger\"\r\n                          onClick={this.clearModalHandler}>\r\n                    <i className=\"fa fa-ban\"/> Cancel</Button>\r\n                  <Button type=\"submit\" size=\"sm\" color=\"primary\">\r\n                    <i className=\"fa fa-dot-circle-o\"/> Submit</Button>\r\n                </Form>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Modal>);\r\n    \r\n    return (\r\n      <div>\r\n        {form_member}\r\n        {this.props.isAdmin && btn_add_member}\r\n        {tbl_members}\r\n        {form_enrollStudent}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isLoading: state.member.isLoading,\r\n    members: state.member.members,\r\n    isAdmin: state.auth.user.displayName === \"admin\",\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onFetchMembers: (token, userId) => dispatch(\r\n      actions.fetchMembers(token, userId)),\r\n    onAddMember: (token, memberInfo) => dispatch(\r\n      actions.createMember(token, memberInfo)),\r\n    onEditMember: (token, memberInfo) => dispatch(\r\n      actions.updateMember(token, memberInfo)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Members);\r\n",
		"// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__3yh_S\"};",
		"// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__P0xtN\"};",
		"const auxi = (props) => props.children;\r\n\r\nexport default auxi;\r\n",
		"import React from \"react\";\r\n\r\nimport classes from \"./Backdrop.module.css\";\r\n\r\nconst backdrop = (props) => (\r\n  props.show\r\n    ? <div className={classes.Backdrop} onClick={props.clicked}/>\r\n    : null\r\n);\r\n\r\nexport default backdrop;\r\n",
		"import React, {Component} from \"react\";\r\nimport Auxi from \"./Auxi\";\r\nimport Backdrop from \"./Backdrop\";\r\n\r\nimport classes from \"./Modal.module.css\";\r\n\r\nclass Modal extends Component {\r\n  \r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return nextProps.show !== this.props.show || nextProps.children !== this.props.ch
		
		ildren
		;
		\
		r
		\
		n
		}
		\
		r
		\
		n
		\
		r
		\
		n
		render()
		{
			\
		r
		\
		n
		return
		(
		\
		r
		\
		n
		<Auxi>
		\
		r
		\
		n
		<Backdrop
		show=
		{
			this.props.show
		}
		clicked=
		{
			this.props.modalClosed
		}
		/>
		\
		r
		\
		n
		<div
		\
		r
		\
		n
		className=
		{
			classes.Modal
		}
		\
		r
		\
		n
		style=
		{
		{
			\
		r
		\
		n
		transform
		:
		this.props.show
		?
		\
		"translateY(0)\" : \"translateY(-700vh)\",\r\n            opacity  : this.props.show ? \"1\" : \"0\",\r\n          }}>\r\n
		{this.props.children}\r\n        </div>\r\n      </Auxi>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n"
	],
	"sourceRoot":     ""
}